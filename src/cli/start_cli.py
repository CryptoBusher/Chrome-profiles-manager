from sys import stderr, exit

import questionary
from loguru import logger

from src.utils.helpers import kill_chrome_processes
from .base_cli import BaseCli
from .profiles_cli import ProfilesCli
from .extensions_cli import ExtensionsCli
from .automation_cli import AutomationCli
from .settings_cli import SettingsCli


class StartPage(BaseCli):
    CLI_OPTIONS = {
        'launch_profiles': {
            'human_name': 'üöÄ –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π',
            'action': lambda: ProfilesCli.launch_profiles()
        },
        'show_profiles': {
            'human_name': 'üìñ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π',
            'action': lambda: ProfilesCli.show_profiles()
        },
        'set_comments': {
            'human_name': 'üìù –∑–∞–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
            'action': lambda: ProfilesCli.set_comments()
        },
        'run_scripts': {
            'human_name': 'ü§ñ –ø—Ä–æ–≥–æ–Ω —Å–∫—Ä–∏–ø—Ç–æ–≤',
            'action': lambda: AutomationCli.show()
        },
        'manage_extensions': {
            'human_name': 'üß© —Ä–∞–±–æ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏',
            'action': lambda: ExtensionsCli.show()
        },
        'create_profiles': {
            'human_name': '‚ûï —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π',
            'action': lambda: ProfilesCli.create_profiles()
        },
        'kill_chrome_processes': {
            'human_name': 'üíÄ —É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome',
            'action': lambda: kill_chrome_processes()
        },
        'settings': {
            'human_name': 'üîß –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
            'action': lambda: SettingsCli.show()
        },
        'exit': {
            'human_name': 'üö™ –≤—ã—Ö–æ–¥',
            'action': lambda: StartPage.exit_programm()
        }
    }

    @staticmethod
    def exit_programm():
        logger.info("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        exit(0)


    @classmethod
    def show(cls):
        while True:
            selected_option_human_name = questionary.select(
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ",
                choices=[option["human_name"] for option in cls.CLI_OPTIONS.values()],
                style=cls.CUSTOM_STYLE
            ).ask()

            if selected_option_human_name is None:
                cls.exit_programm()

            selected_option_key = next(
                (key for key, value in cls.CLI_OPTIONS.items() if value["human_name"] == selected_option_human_name),
                None
            )

            if not selected_option_key:
                cls.exit_programm()

            selected_option = cls.CLI_OPTIONS[selected_option_key]
            if selected_option["action"]:
                selected_option["action"]()
            else:
                logger.warning("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
