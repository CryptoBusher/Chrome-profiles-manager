import re
import json

import questionary
from loguru import logger

from .base_cli import BaseCli
from src.utils.constants import ProjectPaths
from src.core.browser.browser_manager import BrowserManager
from src.core.profile.profile_manager import ProfileManager


class ProfilesCli(BaseCli):
    @classmethod
    def select_profiles(cls) -> list[str] | None:
        profiles_list = ProfileManager.get_sorted_profiles_list()

        if not profiles_list:
            logger.error("–Æ–∑–µ—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return

        select_options = {
            'select_from_list': 'üìã –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞',
            'enter_names': 'üìù –≤–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è',
            'select_by_comment': 'üìí –≤—ã–±—Ä–∞—Ç—å –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é',
            'select_all': 'üì¶ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ',
            'back_to_start': 'üè† –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
        }

        select_method_value = questionary.select(
            "–°–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞ —é–∑–µ—Ä–æ–≤",
            choices=list(select_options.values()),
            style=cls.CUSTOM_STYLE
        ).ask()

        if select_method_value is None:
            return

        select_method_key = next((key for key, value in select_options.items() if value == select_method_value), None)

        selected_profiles = []

        match select_method_key:
            case 'select_from_list':
                selected_profiles = cls._paginate_selection(profiles_list, '–ø—Ä–æ—Ñ–∏–ª–∏')

            case 'enter_names':
                names_raw = questionary.text(
                    "–í–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —é–∑–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n",
                    style=cls.CUSTOM_STYLE
                ).ask()

                names = list(set(i.strip() for i in re.split(r'[\n,]+', names_raw) if i.strip()))
                names_to_skip = [name for name in names if name not in profiles_list]

                if names_to_skip:
                    logger.warning(f'‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —é–∑–µ—Ä–æ–≤ {names_to_skip}, —é–∑–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')

                selected_profiles = [name for name in names if name not in names_to_skip]

            case 'select_by_comment':
                comment_substring: str = questionary.text(
                    "–í–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n",
                    style=cls.CUSTOM_STYLE
                ).ask()

                for profile_name in profiles_list:
                    comment = ProfileManager.get_profile_comment(profile_name)
                    if comment_substring.lower() in comment.lower:
                        selected_profiles.append(profile_name)

            case 'select_all':
                selected_profiles = profiles_list

            case 'back_to_start':
                return

        if not selected_profiles:
            return

        selected_profiles = ProfileManager.sort_profiles(selected_profiles)

        return selected_profiles

    @classmethod
    def create_profiles(cls):
        create_methods = {
            'manual': 'üìù –∑–∞–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é',
            'auto': 'ü§ñ –∑–∞–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
            'back_to_start': 'üè† –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
        }

        create_method_value = questionary.select(
            "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –∏–º–µ–Ω",
            choices=list(create_methods.values()),
            style=cls.CUSTOM_STYLE
        ).ask()

        if create_method_value is None:
            return

        create_method_key = next((key for key, value in create_methods.items() if value == create_method_value), None)

        profiles_to_create = []
        match create_method_key:
            case 'manual':
                names_raw = questionary.text(
                    "–í–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —é–∑–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n",
                    style=cls.CUSTOM_STYLE
                ).ask()

                selected_names = list(set(i.strip() for i in re.split(r'[\n,]+', names_raw) if i.strip()))

                existing_profile_names = ProfileManager.get_sorted_profiles_list()
                names_to_skip = list(set(existing_profile_names) & set(selected_names))

                if names_to_skip:
                    logger.warning(f'‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —é–∑–µ—Ä–æ–≤ {names_to_skip}, –∏–º–µ–Ω–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã')

                profiles_to_create = [item for item in selected_names if item not in names_to_skip]

            case 'auto':
                amount = questionary.text(
                    "–í–ø–∏—à–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è\n",
                    style=cls.CUSTOM_STYLE
                ).ask()

                try:
                    amount = int(amount)
                except ValueError:
                    logger.warning('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
                    return

                highest_existing_numeric_name = ProfileManager.get_highest_numeric_profile_name()
                start = highest_existing_numeric_name + 1
                profiles_to_create = list(range(start, start + amount))

            case 'back_to_start':
                return

        for name in profiles_to_create:
            ProfileManager.create_profile(name)

    @classmethod
    def launch_profiles(cls):
        selected_profiles = cls.select_profiles()

        if not selected_profiles:
            logger.warning("–Æ–∑–µ—Ä—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")
            return

        # TODO: [CONFIG] reverse selected profiles as per config

        for i, name in enumerate(selected_profiles):
            # TODO: [CONFIG] pass working area w/h here from user settings
            window_geometry = BrowserManager.calculate_window_geometry(len(selected_profiles),
                                                                       i)
            BrowserManager().launch_browser(profile_name=name,
                                            window_geometry=window_geometry,
                                            debug=False,
                                            headless=False,
                                            maximized=False)

            # TODO: [CONFIG] sleep as per launch delay from user settings
            # sleep(config['launch_delay_sec'])

    @classmethod
    def show_profiles(cls):
        profiles_table = ProfileManager.get_profiles_table()
        print(profiles_table)

    @classmethod
    def set_comments(cls):
        selected_profiles = cls.select_profiles()

        if not selected_profiles:
            logger.warning("–Æ–∑–µ—Ä—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")
            return

        new_comment = questionary.text(
            "–í–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n",
            style=cls.CUSTOM_STYLE
        ).ask()

        if new_comment is None:
            return

        for name in selected_profiles:
            ProfileManager.set_profile_comment(name, new_comment)
