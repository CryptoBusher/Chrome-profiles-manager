import json
import shutil
import os
from concurrent.futures import ThreadPoolExecutor

import questionary
from loguru import logger

from config import general_config
from src.utils.helpers import get_all_default_extensions_info, get_profiles_extensions_info, copy_extension
from src.utils.constants import *
from .utils import select_profiles, custom_style


def manage_extensions():
    selected_profiles = select_profiles()
    if not selected_profiles:
        return

    extension_activity = questionary.select(
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏",
        choices=[
            'üü¢ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –±–µ–∑ –∑–∞–º–µ–Ω—ã',
            'üî¥ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å –∑–∞–º–µ–Ω–æ–π',
            '‚ùå  —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è',
            'üè† –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
        ],
        style=custom_style
    ).ask()

    if '–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é' in extension_activity:
        return

    if '–¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –±–µ–∑ –∑–∞–º–µ–Ω—ã' in extension_activity:
        add_default_extensions(selected_profiles, False)
    elif '–¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å –∑–∞–º–µ–Ω–æ–π' in extension_activity:
        add_default_extensions(selected_profiles, True)
    elif '—É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è' in extension_activity:
        remove_extensions(selected_profiles)
    else:
        logger.warning('‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ')
        return


def add_default_extensions(selected_profiles: list[str], replace=False) -> None:
    default_extensions_info = get_all_default_extensions_info()
    if not default_extensions_info:
        logger.warning('‚ö†Ô∏è –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        return

    choices = [
        f"{ext_id} ({name})" if name else ext_id
        for ext_id, name in default_extensions_info.items()
    ]

    selected_extensions = questionary.checkbox(
        "–í—ã–±–µ—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è",
        choices=choices,
        style=custom_style
    ).ask()

    selected_ids = [str(choice.split(" ")[0]) for choice in selected_extensions]

    if not selected_ids:
        logger.warning('‚ö†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã')
        return

    with ThreadPoolExecutor(max_workers=general_config['max_workers']) as executor:
        futures = []
        for profile in selected_profiles:
            profile_extensions_path = CHROME_DATA_PATH / f"Profile {profile}" / "Extensions"
            os.makedirs(profile_extensions_path, exist_ok=True)

            for ext_id in selected_ids:
                src_path = os.path.join(DEFAULT_EXTENSIONS_PATH, ext_id)
                dest_path = os.path.join(profile_extensions_path, ext_id)
                futures.append(executor.submit(copy_extension, src_path, dest_path, profile, ext_id, replace))


def remove_extensions(selected_profiles: list[str]) -> None:
    profiles_extension_info = get_profiles_extensions_info(selected_profiles)
    if not profiles_extension_info:
        logger.warning('‚ö†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        return

    choices = [
        f"{ext_id} ({name})" if name else ext_id
        for ext_id, name in profiles_extension_info.items()
    ]

    selected_extensions = questionary.checkbox(
        "–í—ã–±–µ—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è",
        choices=choices,
        style=custom_style
    ).ask()

    selected_ids = [choice.split(" ")[0] for choice in selected_extensions]

    if not selected_ids:
        logger.warning('‚ö†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω—ã')
        return

    for profile in selected_profiles:
        removed_something = False

        extensions_path = os.path.join(PROJECT_PATH, "data", "profiles", f"Profile {profile}", "Extensions")
        for ext_id in selected_ids:
            try:
                ext_path = os.path.join(extensions_path, ext_id)
                if os.path.isdir(ext_path):
                    shutil.rmtree(ext_path)
                    logger.debug(f'{profile} - —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ {ext_id} —É–¥–∞–ª–µ–Ω–æ')
                    removed_something = True
            except Exception as e:
                logger.error(f'‚õî  {profile} - –Ω–µ —É–¥–∞–ª–æc—å —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ {ext_id}')
                logger.debug(f'{profile} - –Ω–µ —É–¥–∞–ª–æc—å —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ {ext_id}, –ø—Ä–∏—á–∏–Ω–∞: {e}')

        if removed_something:
            logger.info(f'‚úÖ  {profile} - —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã')
