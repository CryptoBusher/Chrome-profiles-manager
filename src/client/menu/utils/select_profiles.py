import re
import questionary
from loguru import logger

from src.utils.helpers import get_users_list, get_comments_for_users, sort_users
from src.client.menu.utils.helpers import custom_style


def select_users(reverse: bool = False) -> list[str] | None:
    profiles_list = get_users_list()

    if not profiles_list:
        logger.error("‚õî  –Æ–∑–µ—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return

    select_options = [
        'üìã –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞',
        'üìù –≤–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è',
        'üìí –≤—ã–±—Ä–∞—Ç—å –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é',
        'üì¶ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ',
        'üè† –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
    ]

    select_method = questionary.select(
        "–°–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞ —é–∑–µ—Ä–æ–≤",
        choices=select_options,
        style=custom_style
    ).ask()

    if '–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é' in select_method:
        return

    selected_profiles = []
    if '–≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞' in select_method:
        selected_profiles = paginate_profiles(profiles_list)

    elif '–≤–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è' in select_method:
        names_raw = questionary.text(
            "–í–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —é–∑–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n",
            style=custom_style
        ).ask()

        names = list(set(i.strip() for i in re.split(r'[\n,]+', names_raw) if i.strip()))

        names_to_skip = [name for name in names if name not in profiles_list]

        if names_to_skip:
            logger.warning(f'‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —é–∑–µ—Ä–æ–≤ {names_to_skip}, —é–∑–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')

        selected_profiles = [name for name in names if name not in names_to_skip]

    elif '–≤—ã–±—Ä–∞—Ç—å –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é' in select_method:
        comment_substring = questionary.text(
            "–í–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n",
            style=custom_style
        ).ask()

        for profile in profiles_list:
            result = get_comments_for_users()
            if result["success"]:
                comments = result["comments"]
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ø—Ä–∏—á–∏–Ω–∞: {result["description"]}")
                comments = {}

            comment = comments.get(profile, '')
            if comment_substring.lower() in comment.lower():
                selected_profiles.append(profile)

    elif '–≤—ã–±—Ä–∞—Ç—å –≤—Å–µ' in select_method:
        selected_profiles = profiles_list

    if not selected_profiles:
        logger.warning("‚ö†Ô∏è –Æ–∑–µ—Ä—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")
        return

    selected_profiles = sort_users(selected_profiles)
    if reverse:
        selected_profiles = selected_profiles[::-1]

    return selected_profiles


def paginate_profiles(profiles, items_per_page=10):
    total_pages = (len(profiles) + items_per_page - 1) // items_per_page
    current_page = 0
    selected_profiles = []

    while current_page < total_pages:
        start = current_page * items_per_page
        end = min(start + items_per_page, len(profiles))
        page_profiles = profiles[start:end]

        selected_profiles_on_page = questionary.checkbox(
            f"–í—ã–±–µ—Ä–∏ —é–∑–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages})",
            choices=page_profiles,
            style=custom_style,
        ).ask()

        selected_profiles.extend(selected_profiles_on_page)

        current_page += 1

    return selected_profiles
